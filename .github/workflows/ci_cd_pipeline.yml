name: CTA Train Analytics CI/CD Pipeline

on:
  push:

permissions:
  contents: read

jobs:

  run_tests_and_get_coverage:

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage
          pip install -r lambdas/get_gtfs_data/requirements.txt

      - name: Make the test script executable
        run: chmod +x pipeline_scripts/run_tests.sh

      - name: Run unit and component tests
        run: ./pipeline_scripts/run_tests.sh

  zip_lambdas:

    runs-on: ubuntu-latest
    needs: run_tests_and_get_coverage
    strategy:
      matrix:
        lambda:
          - function_name: get_gtfs_data
            handler_filename: main.py
            source_path: ./lambdas/get_gtfs_data
          # - function_name: func2
          #   handler_filename: main.py
          #   source_path: ./lambda2
          # - function_name: func3
          #   handler_filename: main.py
          #   source_path: ./lambda3
          # - function_name: func4
          #   handler_filename: main.py
          #   source_path: ./lambda4

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install zip
        run: sudo apt-get install zip -y

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
    
      - name: Make the zip lambdas script executable
        run: chmod +x pipeline_scripts/zip_lambda.sh

      - name: Run script to zip lambda
        run: |
          ./pipeline_scripts/zip_lambda.sh \
            "${{ matrix.lambda.function_name }}" \
            "${{ matrix.lambda.handler_filename }}" \
            "${{ matrix.lambda.source_path }}"
        
      - name: Print contents of lambda directory
        run: ls -la lambdas/get_gtfs_data

      - name: Print contents of root directory
        run: ls -la

  deploy_infrastructure:

    runs-on: ubuntu-latest
    needs: zip_lambdas
    env:
      STATE_S3_BUCKET_NAME: ${{ secrets.STATE_S3_BUCKET_NAME }}
      TF_VAR_infra_role_arn: ${{ secrets.TF_VAR_INFRA_ROLE_ARN }}
      TF_VAR_account_number: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_email: ${{ secrets.EMAIL }}
      TF_VAR_environment: "prod"
      TF_VAR_project_name: "ctaTrainAnalytics"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-2'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        
      - name: Initialize Terraform
        run: |
          echo "Initializing Terraform..."
          terraform init \
          -backend-config="bucket=${STATE_S3_BUCKET_NAME}" \
          -backend-config="key=cta-train-analytics/terraform.tfstate" \
          -backend-config="region=us-east-2" \
          -backend-config="assume_role={role_arn=\"${TF_VAR_infra_role_arn}\", session_name=\"terraform-session\"}"

      - name: Plan Terraform
        run: |
            echo "Planning Terraform configuration..."
            terraform plan -out=tfplan
  
      - name: Apply Terraform
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Applying Terraform configuration..."
          terraform apply -auto-approve tfplan